#!/bin/bash
###########################################################################
#                                 USAGE                                   #
# apply_conf CONFIG_FILE [-if [argument]] [-varname varvalue ...]         #
#                                                                         #
# CONFIG_FILE should be like following                                    #
#      varname varvalue                                                   #
#      anothervar multiword values are OK                                 #
#                                                                         #
# -if switch must be immediately after CONFIG_FILE. If this switch is     #
# given, then the lines that contains undefined variables will not be     #
# printed. If this switch is present, and has an argument, than program   #
# will check for the existence of a variable with the name of given       #
# argument, and exit immediately if it is not present.                    #
#                                                                         #
# Finally, one can supply variables via the command line. Variables given #
# this way will override the variables defined in the CONFIG_FILE         #
#                                                                         #
###########################################################################

# read .jobconfig file
configfile=$1
shift
while read lhs rhs; do
  if [[ $lhs != '#'* && ! -z $lhs ]]; then
    eval "$lhs='$rhs'"
  fi
done < $configfile

# check if special argument -if given. when found skips lines that contains
# unknown variables. When a variable name given after if, if given variable is
# not defined, exits immediately.
if [[ $1 == -if ]]; then
  if [[ -z $2 || $2 == -* ]]; then
    skip="skip"
    shift
  elif [[ -z ${!2} ]]; then
    exit
  else
    skip=""
    shift 2
  fi
fi

# read command line arguments
while [[ $# > 1 ]]; do
  eval "${1#-}='$2'"
  shift 2
done

# allow lline to be set manually (TODO: think this again)
if [[ -z $lline ]]; then
  if [[ $cpu == separate && -z $lline ]]; then
    lline="nodes=$nodes:ppn=$ppn,walltime=$walltime"
  else
    lline="mppwidth=$((nodes*ppn)),walltime=$walltime"
  fi
fi

while read -r line; do
  # check if all the variables are defined. skip the line otherwise.
  if [[ -n $skip ]]; then
    i=0
    j=0
    tmp=`echo "$line"|sed 's/\\\\\\$//g'`
    for match in $(echo $tmp|command grep -P -o '(?<=\$)[A-Za-z0-9_]*'); do
      match=${match#\{}
      if [[ -n ${!match} ]]; then
        let j++
      fi
      let i++
    done
    if [[ $i > $j ]]; then
      continue
    fi
  fi
  # if line is a comment, eval evaluates to null
  # to write #PBS lines uncomment, eval, recomment
  if [[ $line == '#'* ]]; then
    echo -n '#'
    eval "echo \"${line#\#}\""
  else
    eval "echo \"$line\""
  fi
done
