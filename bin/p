#!/bin/bash

if [[ -t 1 ]]; then
  fout="$(basename $PWD)".pdb
else
  fout="/dev/stdout"
fi

if [[ -f output.txt ]]; then
  filout="output.txt"
elif [[ -f PW.out ]]; then
  filout="PW.out"
else
  echo "No output file was found. Exiting." 1>&2
  exit -1
fi

# get where the last run starts
n=( $(grep -n starts $filout|cut -d':' -f1) )

# get the last ATOMIC_POSITIONS flag
f=( $(grep -n 'ATOMIC_POSITIONS' $filout|cut -d':' -f1) )

if [[ -z $f ]];then
  echo "No atomic coordinates are found in the output file. Exiting"  1>&2
  exit -1
else
  while [[ ${n[${#n[@]}-1]} -gt ${f[${#f[@]}-1]} ]]; do
    unset n[${#n[@]}-1]
    echo "No atomic positions are found in the last run, using from the previous." 1>&2
  done
  n=${n[${#n[@]}-1]}
fi

awk -vn=$n -vf=${f[${#f[@]}-1]} '
function abs(a)
{
  if(a<0)
    a=-a;
  return a;
}

function acos(a)
{
  pi=3.141592653589793
  if(abs(a)==1) {
    return (1-a)*pi/2
  } else {
    return atan2(-a,sqrt(1-a*a))+2*atan2(0.5,0.5)
  }
}

function rad2deg(a) {
  pi=3.141592653589793
  return a/pi*180.0
}

function deg2rad(a) {
  pi=3.141592653589793
  return a*pi/180.0
}

BEGIN {
  b2a = 0.529177249
  i = 0
  IGNORECASE = 1
  cell=-1
  a=-1
  b=-1
  c=-1
  alpha=-1
  beta=-1
  gamma=-1
  nat=0
}
#check the lattice type
NR > n {
  if ($0 ~ /bravais-lattice/ && cell == -1)
  {
    cell = $4
    if (cell != 1 && cell != 5 && cell != 8 && cell != 14)
    {
      printf "Is only available for ibrav=1,5,8,14\n"
      exit
    }
    printf "REMARK lattice type=%d\n", cell
  }
  else if ($0 ~ /celldm\(1\)/ && a == -1)
  {
    if (cell == 1)
    {
      a = $2 * b2a
      b = a
      c = a
    }
    if (cell == 5)
    {
      a = $2 * b2a
      b = a
      c = a
    }

    if (cell == 8)
    {
      a = $2 * b2a
      b = $4 * a
      c = $6 * a
    }

    if (cell == 14)
    {
      a = $2 * b2a
      b = $4 * a
      c = $6 * a
    }

    printf "REMARK Cell lengths %f %f %f\n", a, b, c
  }
  else if ($0 ~ /celldm\(4\)/ && alpha == -1)
  {
    if (cell == 1)
    {
      alpha = 90.0
      beta  = 90.0
      gamma = 90.0
    }
    if (cell == 5)
    {
      alpha = rad2deg(acos($2))
      beta = alpha
      gamma = beta
    }

    if (cell == 8)
    {
      alpha = 90.0
      beta = 90.0
      gamma = 90.0
    }

    if (cell == 14)
    {
      alpha = rad2deg(acos($2))
      beta = rad2deg(acos($4))
      gamma = rad2deg(acos($6))
    }

    printf "REMARK Cell angles %f %f %f\n", alpha, beta, gamma
  }
  else if (($0 ~ /crystal axes/))
  {
    getline a1
    split(a1,tmp)

    ax = tmp[4] * a
    ay = tmp[5] * a
    az = tmp[6] * a

    getline a1
    split(a1,tmp)
    bx = tmp[4] * a
    by = tmp[5] * a
    bz = tmp[6] * a

    getline a1
    split(a1,tmp)
    cx = tmp[4] * a
    cy = tmp[5] * a
    cz = tmp[6] * a

    printf "REMARK Cell %8.4f %8.4f %8.4f\n", ax, ay, az
    printf "REMARK      %8.4f %8.4f %8.4f\n", bx, by, bz
    printf "REMARK      %8.4f %8.4f %8.4f\n", cx, cy, cz
  }
  else if (($0 ~ /number of atoms\/cell/) && nat == 0)
  {
    nat = $5

    printf "REMARK Number of atoms %d\n", nat
  }
  else if($0 ~ /Begin final/ || NR == f)
  {
    if (NR == f)
      printf "Using the last known positions (%d)\n", NR> "/dev/stderr"
    else
      printf "Using converged ionic positions (%d)\n", NR > "/dev/stderr"
    while ( $0 !~ /ATOMIC_POSITIONS/ )
      getline
    flag = $2 ~ /angstrom/ ? 0 : 1
    parse = 1
  }
  else if(parse == 1)
  {
    printf "CRYST1%9.3f%9.3f%9.3f%7.2f%7.2f%7.2f P 1           1\n", a, b, c, alpha, beta, gamma
    for(i = 0; i < nat; i++){
      if(flag){
        printf "ATOM  %5d %3s      X   1    %8.3f%8.3f%8.3f  1.00  0.00          %2s\n", i+1, $1, $2 * a, $3 * b, $4 * c, $1
      } else {
        printf "ATOM  %5d %3s      X   1    %8.3f%8.3f%8.3f  1.00  0.00          %2s\n", i+1, $1, $2, $3, $4, $1
      }
      getline
    }
    exit
  }
}' $filout > $fout

echo "Written to $fout" 1>&2
