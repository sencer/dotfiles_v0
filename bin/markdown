#!/usr/bin/env ruby

require 'coderay'
require 'redcarpet'

class MarkdownRenderer < Redcarpet::Render::HTML
  def block_code(code, language)
    language ||= 'text'
    CodeRay.scan(code, language).div
  end
end

def markdown(text)
  rndr = MarkdownRenderer.new(:filter_html => true, :hard_wrap => false)
  options = {
    fenced_code_blocks: true,
     no_intra_emphasis: true,
              autolink: true,
         strikethrough: true,
       lax_html_blocks: true,
           superscript: true,
             underline: true,
             highlight: true,
             footnotes: true,
                tables: true,
                quotes: true
  }
  markdown_to_html = Redcarpet::Markdown.new(rndr, options)
  markdown_to_html.render(text)
end

#handle subscripts
def subscript string
  while open = string.index('_(')
    counter = 1
    close = open + 1
    while counter > 0
      c = string[close+=1]
      if c == '('
        counter += 1
      elsif c == ')'
        counter -= 1
      end
    end
    string[close, 1] = '</sub>'
    string[open, 2] =  '<sub>'
  end
  string
end

puts subscript(markdown(STDIN.read)).gsub(
  /<\/sub>\s*<sup/, "\\0 style='position: relative; left:-0.5em; top:-0.2em'")
# if a sub followed by sup, stack them on top; reverse the order if you don't
# want that
