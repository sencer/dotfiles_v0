#!/usr/bin/env ruby
# encoding: utf-8

require 'rouge'
require 'redcarpet'

class MarkdownRenderer < Redcarpet::Render::HTML
  include Redcarpet::Render::SmartyPants
  def block_code(code, language)
    # ````ruby:4 marks ruby code with
    # line numbers starting from 4
    ln = language.split(':') rescue ''
    lexer = Rouge::Lexer.find_fancy(ln[0], code) || Rouge::Lexers::PlainText
    if lexer.tag == 'make'
      code.gsub!(/^    /, "\t")
    end
    formatter = Rouge::Formatters::HTML.new(
      css_class: "highlight #{lexer.tag}",
      inline_theme: "github",
      line_numbers: ln.length > 1,
      start_line: ln[1] ? ln[1].to_i : 1
    )
    formatter.format(lexer.lex(code))
  end
end

def markdown(text)
  rndr = MarkdownRenderer.new(:filter_html => false, :hard_wrap => false)
  options = {
    fenced_code_blocks: true,
    no_intra_emphasis: true,
    autolink: true,
    strikethrough: true,
    lax_html_blocks: true,
    superscript: true,
    underline: true,
    highlight: true,
    footnotes: true,
    tables: true,
  }
  markdown_to_html = Redcarpet::Markdown.new(rndr, options)
  markdown_to_html.render(text)
end

#handle subscripts
def subscript string
  while open = string.index('_(')
    counter = 1
    close = open + 1
    while counter > 0
      c = string[close+=1]
      if c == '('
        counter += 1
      elsif c == ')'
        counter -= 1
      end
    end
    string[close, 1] = '</sub>'
    string[open, 2] =  '<sub>'
  end
  string
end
puts <<EOF
<html>
  <head>
    <link href="https://gist.githubusercontent.com/andyferra/2554919/raw/2e66cabdafe1c9a7f354aa2ebf5bc38265e638e5/github.css" rel="stylesheet"></link>
  </head>
  <body style="width: 40%; margin: auto; text-align: justify; line-height: 2em; font-size: 1.2em;">
EOF
puts subscript(markdown(STDIN.read)).gsub(
  /<\/sub>\s*<sup/, "\\0 style='position: relative; left:-0.5em; top:-0.2em'")
# if a sub followed by sup, stack them on top; reverse the order if you don't
# want that
puts '</body></html>'
