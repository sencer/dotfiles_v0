#!/bin/bash
if [[ -z $PBSSERVER ]]; then
  if [[ $# == 0 ]]; then
    echo "usage: zpe atom1 atom2..."
    echo
    echo "Atomic coordinates in the original input file"
    echo "must be listed in Angstroms."
    exit
  fi
  n=$#
  all=( $@ )
  inp=`basename $PWD`.txt
  if [[ ! -f $inp ]]; then
    echo 'First you should generate a pwscf input file using `pin`'
    exit -1
  fi
  mkdir -p zpe
  cp $inp zpe/input.txt
  cd zpe
  header="&control
  restart_mode  = 'from_scratch'
  max_seconds   = 10000
  tprnfor       = .TRUE.
/
$(sed -n "/&system/,/_POS/p;/&electrons/a\  startingwfc = 'file'\n\
  startingpot = 'file'" input.txt)"

  for i in ${all[@]}; do
    if [[ -d $i ]]; then
      echo "There is already a folder for atom $i. Backing up the input file"
      echo "and creating a new one. You may want to omit recalculating by"
      echo "editing the job script."
    fi
    for j in {1..6}; do
      mkdir -p $i/$j
      [[ -f $i/$j/input.txt ]] && mv $i/$j/input.txt $i/$j/old.input.txt
      echo "${header}" > $i/$j/input.txt
      awk -va=$1 -vj=$j 'BEGIN{
        x = y = z = 0
        (j < 3) ? x = 1 : ((j < 5) ? y = 1 : z = 1)
        if(j % 2 == 1) { x = -x; y = -y; z = -z}
      } l > 0 {
        if (NR == l + a){
          printf "  %-4s  %14.10f %14.10f %14.10f\n", $1, $2 + 0.01 * x,\
                                                          $3 + 0.01 * y,\
                                                          $4 + 0.01 * z
          i++
        } else {
        print $0
        }
      } $0 ~ /ATOMIC_POSITIONS/ {
        l = NR
      }' input.txt >> $i/$j/input.txt
    done
    shift
  done

  apply_conf $HOME/$PBSSERVER/.jobconfig -if -all "${all[*]}" -kpools 1 -gap 300 -images 1 <<-'EOF' > zpe.job
		#!/bin/bash
		#PBS -l $lline
		#PBS -q $queue
		#PBS -j oe
		#PBS -m ae
		#PBS -M $email
		#PBS -V
	
		module load $modules
	
		gap=$gap
		kpools=$kpools
		images=$images
	
		cd \$PBS_O_WORKDIR
		numprocs=\`wc -l <\${PBS_NODEFILE}\`
		maxseconds=\$(qstat -f \$PBS_JOBID | awk '{if(\$1==\"Resource_List.walltime\"){split(\$3, tmp, \":\");print tmp[1]*3600+tmp[2]*60+tmp[3]-gap;}}' gap=\$gap)
		dt=\$(date +%s)

		for i in ${all}; do
		  for j in {1..6};do
		    if [[ \$((maxseconds+dt)) -gt \$(date +%s) ]]; then
		      cp -r ../pwscf.* \$i/\$j
		      cd \$i/\$j
		      sed -i "\"s/\\\(max_seconds\\s*=\\s*\\\)[0-9]*/\\1\$\(\(maxseconds+dt-\$\(date +%s\)\)\)/\"" input.txt
		      $scheduler $prepara \$numprocs $path/pw.x -npool \$kpools -nimages \$images -inp input.txt >> output.txt
		      rm -rf pwscf.*
		      cd ../..
		    fi
		    echo \$i/\$j: \$((dt-\$(date +%s)))
		  done
		done
	EOF
else
  ras "~/bin/zpe $@"
fi
