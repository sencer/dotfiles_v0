#!/bin/bash
# set -x
###########################################################################
#                                 USAGE                                   #
# templr CONFIG_FILE [-if [argument]] [-varname varvalue ...]             #
#                                                                         #
# CONFIG_FILE should be like following                                    #
#      varname varvalue                                                   #
#      anothervar multiword values are OK                                 #
#                                                                         #
# -if switch must be immediately after CONFIG_FILE. If this switch is     #
# given, then the lines that contains undefined variables will not be     #
# printed. If this switch is present, and has an argument, than program   #
# will check for the existence of a variable with the name of given       #
# argument, and exit immediately if it is not present.                    #
#                                                                         #
# Finally, one can supply variables via the command line. Variables given #
# this way will override the variables defined in the CONFIG_FILE         #
#                                                                         #
###########################################################################

# read .jobconfig file
configfile=$1
shift
while read lhs rhs; do
  if [[ $lhs != '#'* && ! -z $lhs ]]; then
    eval "$lhs='$rhs'"
  fi
done < $configfile

# check if special argument -if given. when found skips lines that contains
# unknown variables. When a variable name given after if, if given variable is
# not defined, exits immediately.
if [[ $1 == -if ]]; then
  if [[ -z $2 || $2 == -* ]]; then
    skip="skip"
    shift
  elif [[ -z ${!2} ]]; then
    echo "Variable $2 not found. Exiting." 2>/dev/null
    exit
  else
    skip=""
    shift 2
  fi
fi

# read command line arguments
while [[ $# > 1 ]]; do
  eval "${1#-}='$2'"
  shift 2
done

while IFS= read line; do
  # check if all the variables are defined. skip the line otherwise.
  i=0; j=0
  for match in $(echo "$line"|command grep -P -o '%[A-Za-z_]+%'|sort|uniq); do
    # match=${match:1:-1} not working in old bash
    match=${match:1:${#match}-2}
    if [[ -n ${!match} ]]; then
      let j++
    fi
    line="${line//%$match%/${!match}}"
    let i++
  done
  # do some simple math
  for match in $(echo "$line"|command grep -P -o '%[0-9-+*/^ ]+%'|sort|uniq); do
    # match=${match:1:-1} not working in old bash
    match=${match:1:${#match}-2}
    line="${line//%$match%/$(echo $match|bc -q)}"
  done
  if [[ -n $skip && $i > $j ]]; then
    continue
  fi
  echo "$line"
done
