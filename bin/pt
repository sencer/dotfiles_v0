#!/bin/bash
function p {
  # exec 4>/dev/tty
  filein=$1
  echo -n $filein " -> "
  fileout=$2
  echo $fileout
  # export lns=`wc -l $filein|cut -f 1 -d " "`
  # echo $lns
  awk '
  function abs(a)
  {
    if(a<0)
      a=-a;
    return a;
  }

  function acos(a)
  {
    pi=3.141592653589793
    if(abs(a)==1) {
      return (1-a)*pi/2  
    } else {
    return atan2(-a,sqrt(1-a*a))+2*atan2(0.5,0.5)  
    }
  }

  function rad2deg(a) {
    pi=3.141592653589793
    return a/pi*180.0
  }

  function deg2rad(a) {
    pi=3.141592653589793
    return a*pi/180.0
  }

  BEGIN {
    b2a = 0.529177249
    cell=-1
    a=-1
    b=-1
    c=-1
    alpha=-1
    beta=-1
    gamma=-1
    natom=0
  }
  {
    #check the lattice type
    if ($0 ~ /bravais-lattice/ && cell == -1)
    {
      cell = $4
      if (cell != 1 && cell != 5 && cell != 6 && cell != 8 && cell != 12 && cell != 14)
      {
        printf "Is only available for ibrav=1,5,8,14\n"
        exit
      }
      printf "REMARK lattice type=%d\n", cell
    }

    #get the cell lengths
    if ($0 ~ /celldm\(1\)/ && a == -1)
    {

      if (cell == 1 || cell == 5)
      {
        a = $2 * b2a
        b = a
        c = a
      }
      else if (cell == 6)
      {
        a = $2 * b2a
        b = a
        c = $6 * a
      }
      else
      {
        a = $2 * b2a
        b = $4 * a
        c = $6 * a
      }

      printf "REMARK Cell lengths %f %f %f\n", a, b, c
    }

    #get the cell angles
    if ($0 ~ /celldm\(4\)/ && alpha == -1)
    {
      alpha = 90.0
      beta  = 90.0
      gamma = 90.0
      if (cell == 5)
      {
        alpha = rad2deg(acos($2))
        beta = alpha
        gamma = beta
      }
      else if (cell == 12)
        gamma = rad2deg(acos($2))
      else if (cell == 14)
      {
        alpha = rad2deg(acos($2))
        beta = rad2deg(acos($4))
        gamma = rad2deg(acos($6))
      }

      printf "REMARK Cell angles %f %f %f\n", alpha, beta, gamma
    }

    #get the cell (used for crystal coordinates)
    if (($0 ~ /crystal axes/))
    {
      getline a1
      split(a1,tmp)

      ax = tmp[4] * a
      ay = tmp[5] * a
      az = tmp[6] * a

      getline a1
      split(a1,tmp)
      bx = tmp[4] * a
      by = tmp[5] * a
      bz = tmp[6] * a

      getline a1
      split(a1,tmp)
      cx = tmp[4] * a
      cy = tmp[5] * a
      cz = tmp[6] * a

      printf "REMARK Cell %8.4f %8.4f %8.4f\n", ax, ay, az
      printf "REMARK      %8.4f %8.4f %8.4f\n", bx, by, bz
      printf "REMARK      %8.4f %8.4f %8.4f\n", cx, cy, cz
    }

    #get the number of atoms
    if (($0 ~ /number of atoms\/cell/) && natom == 0)
    {
      natom = $5

      printf "REMARK Number of atoms %d\n", natom
    }

    #now get the atoms
    if ( $0 ~ /ATOMIC_POSITIONS/ )
    {
      if ($2 ~ /(bohr)/)
      {
        printf "CRYST1%9.3f%9.3f%9.3f%7.2f%7.2f%7.2f P 1           1\n", a, b, c, alpha, beta, gamma

        for (i=1; i<=natom; i++)
        {
          getline a1
          split(a1,tmp)
          #shorten element names to two chars
          tmp[1]=substr(tmp[1], 1, 2)
          printf "ATOM  %5d %3s      X   1    %8.3f%8.3f%8.3f  1.00  0.00          %2s\n", i, tmp[1], tmp[2]*b2a, tmp[3]*b2a, tmp[4]*b2a, tmp[1]
        }

        printf "END\n"
      }
      else if ($2 ~ /(crystal)/)
      {
        printf "CRYST1%9.3f%9.3f%9.3f%7.2f%7.2f%7.2f P 1           1\n", a, b, c, alpha, beta, gamma
        # system("echo -n \b\r$(("NR"/$lns)) >&4")
        for (i=1; i<=natom; i++)
        {
          getline a1
          split(a1,tmp)
          #shorten element names to two chars
          tmp[1]=substr(tmp[1], 1, 2)

          x=tmp[2]*ax+tmp[3]*bx+tmp[4]*cx
          y=tmp[2]*ay+tmp[3]*by+tmp[4]*cy
          z=tmp[2]*az+tmp[3]*bz+tmp[4]*cz

          printf "ATOM  %5d %3s      X   1    %8.3f%8.3f%8.3f  1.00  0.00          %2s\n", i, tmp[1], x, y, z, tmp[1]
        }

        printf "END\n" 
      }
      else if ($2 ~ /(angstrom)/)
      {
        printf "CRYST1%9.3f%9.3f%9.3f%7.2f%7.2f%7.2f P 1           1\n", a, b, c, alpha, beta, gamma

        for (i=1; i<=natom; i++)
        {
          getline a1
          split(a1,tmp)
          #shorten element names to two chars
          tmp[1]=substr(tmp[1], 1, 2)
          printf "ATOM  %5d %3s      X   1    %8.3f%8.3f%8.3f  1.00  0.00          %2s\n", i, tmp[1], tmp[2], tmp[3], tmp[4], tmp[1]
        }

        printf "END\n"
      }
      else
      {
        printf "Unimplemented length unit... get to work!!!!\n"
        exit
      }
    }
  }' $filein

}

if [ $# == 0 ];then
  echo $(pwd)
  a=$(echo `basename $(pwd)`)
  filein="output.txt"
  fileout=$a".pdb"
  p $filein > $fileout
else
  while [ $# -ne 0 ];do
    filein=$1
    p $filein
    shift
  done
fi




